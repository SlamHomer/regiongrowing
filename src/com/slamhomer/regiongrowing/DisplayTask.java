package com.slamhomer.regiongrowing;

import java.io.ByteArrayOutputStream;

import com.slamhomer.regiongrowing_gameobjects.Gamemanager;
import com.slamhomer.regiongrowing_network.GetImgThread;
import com.slamhomer.regiongrowing_network.TurnTaskInThread;
import com.slamhomer.regiongrowing_network.UpdateThread;


import android.os.Bundle;
import android.app.Activity;
import android.content.Intent;
import android.graphics.Bitmap;
import android.graphics.BitmapFactory;
import android.util.Base64;
import android.view.Menu;
import android.view.View;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.TextView;

//TODO: Unsch√∂n alles, warte auf Skript fix
public class DisplayTask extends Activity {
	private static String titel = null;
	private static String desc = null;
	private static int inf;
	private static String erf;
	
	private static final int CAMERA_PIC_REQUEST = 1987;
	private static boolean tookPic = false;
	private static String imgCode = null;
	
	private static final String debugString = "";
			

	
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_display_task);
		
		Bundle extras = getIntent().getExtras();
		int position = extras.getInt("numbers");
		
		final TextView textView1 = (TextView)findViewById(R.id.textView1);
		titel = Gamemanager.getTask(position).getTaskName();
	    textView1.setText(titel);
	    final TextView textView2 = (TextView)findViewById(R.id.textView2);
	    desc = Gamemanager.getTask(position).getTaskDesc();
	    textView2.setText(desc);
	    final TextView textView4 = (TextView)findViewById(R.id.textView4);
	    inf = Gamemanager.getTask(position).getTaskInf();
	    textView4.setText(String.valueOf(inf));
	    final TextView textView6 = (TextView)findViewById(R.id.textView6);
	    erf = Gamemanager.getTask(position).getTaskErf();
	    textView6.setText(String.valueOf(erf));
	    
	    if(!erf.equals("Nicht abgeschlossen!")){
		    Button abgeben = (Button) findViewById(R.id.button1);
		    Button bild = (Button) findViewById(R.id.button2);
		    Button anzeigen = (Button) findViewById(R.id.button3);
		    abgeben.setVisibility(View.GONE);
		    bild.setVisibility(View.GONE);
		    anzeigen.setVisibility(View.VISIBLE);
	    }
	    
	    tookPic = false;
	}

	@Override
	public boolean onCreateOptionsMenu(Menu menu) {
		// Inflate the menu; this adds items to the action bar if it is present.
		getMenuInflater().inflate(R.menu.activity_display_task, menu);
		return true;
	}
	
	public void goTurnIn(View view){
		
		if(tookPic == true){
			System.out.println("Mit imgCode!");
			Thread turnIn = new TurnTaskInThread(titel,imgCode);
			turnIn.run();
			try {
				turnIn.join();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}else{
			Thread turnIn = new TurnTaskInThread(titel,null);
			turnIn.run();
			try {
				turnIn.join();
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
		}

		
		//TODO: auf fehler √ºberpr√ºfen
		Messages.alert("Tasks wurde abgegeben.", "Erfolg!", "OK", this);
		tookPic = false;
		
		Button abgeben = (Button) findViewById(R.id.button1);
	    Button bild = (Button) findViewById(R.id.button2);
	    Button anzeigen = (Button) findViewById(R.id.button3);
	    abgeben.setVisibility(View.GONE);
	    bild.setVisibility(View.GONE);
	    anzeigen.setVisibility(View.VISIBLE);
	    
		Thread update = new UpdateThread(
				Gamemanager.getLocalPlayer().getName());
		update.run();
		try {
			update.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
	}
	
	
	public void goCamera(View view){
	    Intent cameraIntent = new Intent(android.provider.MediaStore.ACTION_IMAGE_CAPTURE);
	    startActivityForResult(cameraIntent, CAMERA_PIC_REQUEST);
/*	    ImageView foto = (ImageView) findViewById(R.id.imageView1);
	    foto.setVisibility(View.VISIBLE);*/
	}
	
	public void goShowImg(View view){
		ImageView image = (ImageView) findViewById(R.id.imageView1);
		
		int pos = Gamemanager.getPosFromTask(titel);
		
		Thread getImg = new GetImgThread(titel);
		getImg.run();
		try {
			getImg.join();
		} catch (InterruptedException e) {
			e.printStackTrace();
		}
		
		String tmp = Gamemanager.getTask(pos).getImg();
		System.out.println("TASK IMG: "+tmp);
		Bitmap bm = stringToBitmap(tmp);
		
		//DEBUG
		//Bitmap bm = stringToBitmap(debugString);
		
		image.setImageBitmap(bm);
		image.setVisibility(View.VISIBLE);
	}
	
    protected void onActivityResult(int requestCode, int resultCode, Intent data) {  
        if (requestCode == CAMERA_PIC_REQUEST) {  
            Bitmap thumbnail = (Bitmap) data.getExtras().get("data");  

            String s = bitmapToString(thumbnail);
            imgCode = s;
            tookPic = true;
            
            System.out.println("#########################");
            System.out.println("IMAGE STRING CODE: "+s);
            System.out.println("#########################");
            
        }  
    }
    
    
    
    private String bitmapToString(Bitmap bm){
        ByteArrayOutputStream baos = new ByteArrayOutputStream();
        bm.compress(Bitmap.CompressFormat.JPEG, 100, baos);    
        byte[] b = baos.toByteArray();

        String encodedImage = Base64.encodeToString(b,Base64.DEFAULT);
        
        return encodedImage;
    }
    
    private Bitmap stringToBitmap(String string){
    	byte[] decodedString = Base64.decode(string, Base64.DEFAULT);
    	Bitmap decodedByte = BitmapFactory.decodeByteArray(decodedString, 0, decodedString.length);
    	
    	return decodedByte;
    }
}
